from typing import List

# Python中的所有数据类型都是对象，即使是 int 这样的整数类型，也是对象
a = 100
b = 100
print(a is b)  # True, 表示a, b这两个变量指向同一个对象

a = a + 100
print(a is b)  # False, 由于int是不可变对象，”+“ 操作符会返回一个新的对象，所以此时a, b两个变量指向不同的对象了

l = [1, 2, 3]  # 变量的赋值，只是表示让 l 变量指向这个列表对象
del l  # 删除的是 l 这个变量，无法再通过 l 访问这个列表对象，但对象[1, 2, 3]仍然存在


# Python的垃圾回收器会跟踪每个对象的引用，如果[1, 2, 3]除了l外还有其它变量在引用，那就不会被回收，反之[1, 2, 3]对象会被回收
# 再强调一下，del删除的是变量，对象无法被删除，只能被垃圾回收


# Python函数的参数传递全是引用传递

def fun1(l: List[int]):
    l.append(4)


l2 = [1, 2, 3]
fun1(l2)

print(l2)  # [1, 2, 3, 4]  l2指向的列表对象被改变


def fun2(l: List[int]):
    l = l + [4]  # "+" 操作符返回的是一个新的对象，原来的对象并没有被修改


l3 = [1, 2, 3]
fun2(l3)
print(l3)  # [1, 2, 3]


